import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export class PopUpService {
    constructor() {
        this.STORAGE_IDENTIFIER = 'popupauth';
        this.resultInternal$ = new Subject();
    }
    get result$() {
        return this.resultInternal$.asObservable();
    }
    isCurrentlyInPopup() {
        const popup = sessionStorage.getItem(this.STORAGE_IDENTIFIER);
        return !!window.opener && window.opener !== window && !!popup;
    }
    openPopUp(url, popupOptions) {
        const optionsToPass = this.getOptions(popupOptions);
        this.popUp = window.open(url, '_blank', optionsToPass);
        this.popUp.sessionStorage.setItem(this.STORAGE_IDENTIFIER, 'true');
        const listener = (event) => {
            if (!(event === null || event === void 0 ? void 0 : event.data) || typeof event.data !== 'string') {
                return;
            }
            this.resultInternal$.next({ userClosed: false, receivedUrl: event.data });
            this.cleanUp(listener);
        };
        window.addEventListener('message', listener, false);
        this.handle = window.setInterval(() => {
            if (this.popUp.closed) {
                this.resultInternal$.next({ userClosed: true });
                this.cleanUp(listener);
            }
        }, 200);
    }
    sendMessageToMainWindow(url) {
        if (window.opener) {
            this.sendMessage(url, window.location.href);
        }
    }
    cleanUp(listener) {
        var _a;
        window.removeEventListener('message', listener, false);
        window.clearInterval(this.handle);
        if (this.popUp) {
            (_a = this.popUp.sessionStorage) === null || _a === void 0 ? void 0 : _a.removeItem(this.STORAGE_IDENTIFIER);
            this.popUp.close();
            this.popUp = null;
        }
    }
    sendMessage(url, href) {
        window.opener.postMessage(url, href);
    }
    getOptions(popupOptions) {
        const popupDefaultOptions = { width: 500, height: 500, left: 50, top: 50 };
        const options = Object.assign(Object.assign({}, popupDefaultOptions), (popupOptions || {}));
        return Object.entries(options)
            .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)
            .join(',');
    }
}
PopUpService.ɵfac = function PopUpService_Factory(t) { return new (t || PopUpService)(); };
PopUpService.ɵprov = i0.ɵɵdefineInjectable({ token: PopUpService, factory: PopUpService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(PopUpService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wdXAuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLWF1dGgtb2lkYy1jbGllbnQvc3JjLyIsInNvdXJjZXMiOlsibGliL2xvZ2luL3BvcHVwL3BvcHVwLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQWMsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDOztBQUszQyxNQUFNLE9BQU8sWUFBWTtJQUR6QjtRQUVVLHVCQUFrQixHQUFHLFdBQVcsQ0FBQztRQUdqQyxvQkFBZSxHQUFHLElBQUksT0FBTyxFQUFlLENBQUM7S0FvRXREO0lBbEVDLElBQUksT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUM3QyxDQUFDO0lBRUQsa0JBQWtCO1FBQ2hCLE1BQU0sS0FBSyxHQUFHLGNBQWMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDOUQsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLE1BQU0sSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQ2hFLENBQUM7SUFFRCxTQUFTLENBQUMsR0FBVyxFQUFFLFlBQTJCO1FBQ2hELE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDcEQsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUVuRSxNQUFNLFFBQVEsR0FBRyxDQUFDLEtBQW1CLEVBQVEsRUFBRTtZQUM3QyxJQUFJLEVBQUMsS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLElBQUksQ0FBQSxJQUFJLE9BQU8sS0FBSyxDQUFDLElBQUksS0FBSyxRQUFRLEVBQUU7Z0JBQ2xELE9BQU87YUFDUjtZQUVELElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7WUFFMUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN6QixDQUFDLENBQUM7UUFFRixNQUFNLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUVwRCxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFO1lBQ3BDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUU7Z0JBQ3JCLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7Z0JBRWhELElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDeEI7UUFDSCxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDVixDQUFDO0lBRUQsdUJBQXVCLENBQUMsR0FBVztRQUNqQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUU7WUFDakIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM3QztJQUNILENBQUM7SUFFTyxPQUFPLENBQUMsUUFBYTs7UUFDM0IsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFdkQsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFbEMsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2QsTUFBQSxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsMENBQUUsVUFBVSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtZQUMvRCxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ25CLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1NBQ25CO0lBQ0gsQ0FBQztJQUVPLFdBQVcsQ0FBQyxHQUFXLEVBQUUsSUFBWTtRQUMzQyxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVPLFVBQVUsQ0FBQyxZQUEyQjtRQUM1QyxNQUFNLG1CQUFtQixHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBRTNFLE1BQU0sT0FBTyxtQ0FBUSxtQkFBbUIsR0FBSyxDQUFDLFlBQVksSUFBSSxFQUFFLENBQUMsQ0FBRSxDQUFDO1FBRXBFLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7YUFDM0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsa0JBQWtCLENBQUMsR0FBRyxDQUFDLElBQUksa0JBQWtCLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQzthQUNoRixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDZixDQUFDOzt3RUF2RVUsWUFBWTtvREFBWixZQUFZLFdBQVosWUFBWSxtQkFEQyxNQUFNO2tEQUNuQixZQUFZO2NBRHhCLFVBQVU7ZUFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgUG9wdXBPcHRpb25zIH0gZnJvbSAnLi9wb3B1cC1vcHRpb25zJztcclxuaW1wb3J0IHsgUG9wdXBSZXN1bHQgfSBmcm9tICcuL3BvcHVwLXJlc3VsdCc7XHJcblxyXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxyXG5leHBvcnQgY2xhc3MgUG9wVXBTZXJ2aWNlIHtcclxuICBwcml2YXRlIFNUT1JBR0VfSURFTlRJRklFUiA9ICdwb3B1cGF1dGgnO1xyXG4gIHByaXZhdGUgcG9wVXA6IFdpbmRvdztcclxuICBwcml2YXRlIGhhbmRsZTogbnVtYmVyO1xyXG4gIHByaXZhdGUgcmVzdWx0SW50ZXJuYWwkID0gbmV3IFN1YmplY3Q8UG9wdXBSZXN1bHQ+KCk7XHJcblxyXG4gIGdldCByZXN1bHQkKCk6IE9ic2VydmFibGU8UG9wdXBSZXN1bHQ+IHtcclxuICAgIHJldHVybiB0aGlzLnJlc3VsdEludGVybmFsJC5hc09ic2VydmFibGUoKTtcclxuICB9XHJcblxyXG4gIGlzQ3VycmVudGx5SW5Qb3B1cCgpOiBib29sZWFuIHtcclxuICAgIGNvbnN0IHBvcHVwID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSh0aGlzLlNUT1JBR0VfSURFTlRJRklFUik7XHJcbiAgICByZXR1cm4gISF3aW5kb3cub3BlbmVyICYmIHdpbmRvdy5vcGVuZXIgIT09IHdpbmRvdyAmJiAhIXBvcHVwO1xyXG4gIH1cclxuXHJcbiAgb3BlblBvcFVwKHVybDogc3RyaW5nLCBwb3B1cE9wdGlvbnM/OiBQb3B1cE9wdGlvbnMpOiB2b2lkIHtcclxuICAgIGNvbnN0IG9wdGlvbnNUb1Bhc3MgPSB0aGlzLmdldE9wdGlvbnMocG9wdXBPcHRpb25zKTtcclxuICAgIHRoaXMucG9wVXAgPSB3aW5kb3cub3Blbih1cmwsICdfYmxhbmsnLCBvcHRpb25zVG9QYXNzKTtcclxuICAgIHRoaXMucG9wVXAuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSh0aGlzLlNUT1JBR0VfSURFTlRJRklFUiwgJ3RydWUnKTtcclxuXHJcbiAgICBjb25zdCBsaXN0ZW5lciA9IChldmVudDogTWVzc2FnZUV2ZW50KTogdm9pZCA9PiB7XHJcbiAgICAgIGlmICghZXZlbnQ/LmRhdGEgfHwgdHlwZW9mIGV2ZW50LmRhdGEgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLnJlc3VsdEludGVybmFsJC5uZXh0KHsgdXNlckNsb3NlZDogZmFsc2UsIHJlY2VpdmVkVXJsOiBldmVudC5kYXRhIH0pO1xyXG5cclxuICAgICAgdGhpcy5jbGVhblVwKGxpc3RlbmVyKTtcclxuICAgIH07XHJcblxyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpO1xyXG5cclxuICAgIHRoaXMuaGFuZGxlID0gd2luZG93LnNldEludGVydmFsKCgpID0+IHtcclxuICAgICAgaWYgKHRoaXMucG9wVXAuY2xvc2VkKSB7XHJcbiAgICAgICAgdGhpcy5yZXN1bHRJbnRlcm5hbCQubmV4dCh7IHVzZXJDbG9zZWQ6IHRydWUgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuY2xlYW5VcChsaXN0ZW5lcik7XHJcbiAgICAgIH1cclxuICAgIH0sIDIwMCk7XHJcbiAgfVxyXG5cclxuICBzZW5kTWVzc2FnZVRvTWFpbldpbmRvdyh1cmw6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgaWYgKHdpbmRvdy5vcGVuZXIpIHtcclxuICAgICAgdGhpcy5zZW5kTWVzc2FnZSh1cmwsIHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgY2xlYW5VcChsaXN0ZW5lcjogYW55KTogdm9pZCB7XHJcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XHJcblxyXG4gICAgd2luZG93LmNsZWFySW50ZXJ2YWwodGhpcy5oYW5kbGUpO1xyXG5cclxuICAgIGlmICh0aGlzLnBvcFVwKSB7XHJcbiAgICAgIHRoaXMucG9wVXAuc2Vzc2lvblN0b3JhZ2U/LnJlbW92ZUl0ZW0odGhpcy5TVE9SQUdFX0lERU5USUZJRVIpO1xyXG4gICAgICB0aGlzLnBvcFVwLmNsb3NlKCk7XHJcbiAgICAgIHRoaXMucG9wVXAgPSBudWxsO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzZW5kTWVzc2FnZSh1cmw6IHN0cmluZywgaHJlZjogc3RyaW5nKTogdm9pZCB7XHJcbiAgICB3aW5kb3cub3BlbmVyLnBvc3RNZXNzYWdlKHVybCwgaHJlZik7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldE9wdGlvbnMocG9wdXBPcHRpb25zPzogUG9wdXBPcHRpb25zKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHBvcHVwRGVmYXVsdE9wdGlvbnMgPSB7IHdpZHRoOiA1MDAsIGhlaWdodDogNTAwLCBsZWZ0OiA1MCwgdG9wOiA1MCB9O1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7IC4uLnBvcHVwRGVmYXVsdE9wdGlvbnMsIC4uLihwb3B1cE9wdGlvbnMgfHwge30pIH07XHJcblxyXG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKG9wdGlvbnMpXHJcbiAgICAgIC5tYXAoKFtrZXksIHZhbHVlXSkgPT4gYCR7ZW5jb2RlVVJJQ29tcG9uZW50KGtleSl9PSR7ZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKX1gKVxyXG4gICAgICAuam9pbignLCcpO1xyXG4gIH1cclxufVxyXG4iXX0=