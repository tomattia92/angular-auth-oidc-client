import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { distinctUntilChanged } from 'rxjs/operators';
import { EventTypes } from '../public-events/event-types';
import * as i0 from "@angular/core";
import * as i1 from "../storage/storage-persistence.service";
import * as i2 from "../logging/logger.service";
import * as i3 from "../public-events/public-events.service";
import * as i4 from "../config/config.provider";
import * as i5 from "../validation/token-validation.service";
export class AuthStateService {
    constructor(storagePersistenceService, loggerService, publicEventsService, configurationProvider, tokenValidationService) {
        this.storagePersistenceService = storagePersistenceService;
        this.loggerService = loggerService;
        this.publicEventsService = publicEventsService;
        this.configurationProvider = configurationProvider;
        this.tokenValidationService = tokenValidationService;
        this.authorizedInternal$ = new BehaviorSubject(false);
    }
    get authorized$() {
        return this.authorizedInternal$.asObservable().pipe(distinctUntilChanged());
    }
    get isAuthorized() {
        return !!this.storagePersistenceService.getAccessToken() && !!this.storagePersistenceService.getIdToken();
    }
    setAuthorizedAndFireEvent() {
        this.authorizedInternal$.next(true);
    }
    setUnauthorizedAndFireEvent() {
        this.storagePersistenceService.resetAuthStateInStorage();
        this.authorizedInternal$.next(false);
    }
    updateAndPublishAuthState(authorizationResult) {
        this.publicEventsService.fireEvent(EventTypes.NewAuthorizationResult, authorizationResult);
    }
    setAuthorizationData(accessToken, authResult) {
        this.loggerService.logDebug(accessToken);
        this.loggerService.logDebug('storing the accessToken');
        this.storagePersistenceService.write('authzData', accessToken);
        this.persistAccessTokenExpirationTime(authResult);
        this.setAuthorizedAndFireEvent();
    }
    getAccessToken() {
        if (!this.isAuthorized) {
            return '';
        }
        const token = this.storagePersistenceService.getAccessToken();
        return this.decodeURIComponentSafely(token);
    }
    getIdToken() {
        if (!this.isAuthorized) {
            return '';
        }
        const token = this.storagePersistenceService.getIdToken();
        return this.decodeURIComponentSafely(token);
    }
    getRefreshToken() {
        if (!this.isAuthorized) {
            return '';
        }
        const token = this.storagePersistenceService.getRefreshToken();
        return this.decodeURIComponentSafely(token);
    }
    areAuthStorageTokensValid() {
        if (!this.isAuthorized) {
            return false;
        }
        if (this.hasIdTokenExpired()) {
            this.loggerService.logDebug('persisted id_token is expired');
            return false;
        }
        if (this.hasAccessTokenExpiredIfExpiryExists()) {
            this.loggerService.logDebug('persisted access_token is expired');
            return false;
        }
        this.loggerService.logDebug('persisted id_token and access token are valid');
        return true;
    }
    hasIdTokenExpired() {
        const tokenToCheck = this.storagePersistenceService.getIdToken();
        const { renewTimeBeforeTokenExpiresInSeconds } = this.configurationProvider.getOpenIDConfiguration();
        const idTokenExpired = this.tokenValidationService.hasIdTokenExpired(tokenToCheck, renewTimeBeforeTokenExpiresInSeconds);
        if (idTokenExpired) {
            this.publicEventsService.fireEvent(EventTypes.IdTokenExpired, idTokenExpired);
        }
        return idTokenExpired;
    }
    hasAccessTokenExpiredIfExpiryExists() {
        const { renewTimeBeforeTokenExpiresInSeconds } = this.configurationProvider.getOpenIDConfiguration();
        const accessTokenExpiresIn = this.storagePersistenceService.read('access_token_expires_at');
        const accessTokenHasNotExpired = this.tokenValidationService.validateAccessTokenNotExpired(accessTokenExpiresIn, renewTimeBeforeTokenExpiresInSeconds);
        const hasExpired = !accessTokenHasNotExpired;
        if (hasExpired) {
            this.publicEventsService.fireEvent(EventTypes.TokenExpired, hasExpired);
        }
        return hasExpired;
    }
    decodeURIComponentSafely(token) {
        if (token) {
            return decodeURIComponent(token);
        }
        else {
            return '';
        }
    }
    persistAccessTokenExpirationTime(authResult) {
        if (authResult === null || authResult === void 0 ? void 0 : authResult.expires_in) {
            const accessTokenExpiryTime = new Date(new Date().toUTCString()).valueOf() + authResult.expires_in * 1000;
            this.storagePersistenceService.write('access_token_expires_at', accessTokenExpiryTime);
        }
    }
}
AuthStateService.ɵfac = function AuthStateService_Factory(t) { return new (t || AuthStateService)(i0.ɵɵinject(i1.StoragePersistenceService), i0.ɵɵinject(i2.LoggerService), i0.ɵɵinject(i3.PublicEventsService), i0.ɵɵinject(i4.ConfigurationProvider), i0.ɵɵinject(i5.TokenValidationService)); };
AuthStateService.ɵprov = i0.ɵɵdefineInjectable({ token: AuthStateService, factory: AuthStateService.ɵfac });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(AuthStateService, [{
        type: Injectable
    }], function () { return [{ type: i1.StoragePersistenceService }, { type: i2.LoggerService }, { type: i3.PublicEventsService }, { type: i4.ConfigurationProvider }, { type: i5.TokenValidationService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,