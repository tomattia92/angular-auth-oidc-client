import { Injectable } from '@angular/core';
import { switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./callback-handling/code-flow-callback-handler.service";
import * as i2 from "./callback-handling/implicit-flow-callback-handler.service";
import * as i3 from "./callback-handling/history-jwt-keys-callback-handler.service";
import * as i4 from "./callback-handling/user-callback-handler.service";
import * as i5 from "./callback-handling/state-validation-callback-handler.service";
import * as i6 from "./callback-handling/refresh-session-callback-handler.service";
import * as i7 from "./callback-handling/refresh-token-callback-handler.service";
export class FlowsService {
    constructor(codeFlowCallbackHandlerService, implicitFlowCallbackHandlerService, historyJwtKeysCallbackHandlerService, userHandlerService, stateValidationCallbackHandlerService, refreshSessionCallbackHandlerService, refreshTokenCallbackHandlerService) {
        this.codeFlowCallbackHandlerService = codeFlowCallbackHandlerService;
        this.implicitFlowCallbackHandlerService = implicitFlowCallbackHandlerService;
        this.historyJwtKeysCallbackHandlerService = historyJwtKeysCallbackHandlerService;
        this.userHandlerService = userHandlerService;
        this.stateValidationCallbackHandlerService = stateValidationCallbackHandlerService;
        this.refreshSessionCallbackHandlerService = refreshSessionCallbackHandlerService;
        this.refreshTokenCallbackHandlerService = refreshTokenCallbackHandlerService;
    }
    processCodeFlowCallback(urlToCheck) {
        return this.codeFlowCallbackHandlerService.codeFlowCallback(urlToCheck).pipe(switchMap((callbackContext) => this.codeFlowCallbackHandlerService.codeFlowCodeRequest(callbackContext)), switchMap((callbackContext) => this.historyJwtKeysCallbackHandlerService.callbackHistoryAndResetJwtKeys(callbackContext)), switchMap((callbackContext) => this.stateValidationCallbackHandlerService.callbackStateValidation(callbackContext)), switchMap((callbackContext) => this.userHandlerService.callbackUser(callbackContext)));
    }
    processSilentRenewCodeFlowCallback(firstContext) {
        return this.codeFlowCallbackHandlerService.codeFlowCodeRequest(firstContext).pipe(switchMap((callbackContext) => this.historyJwtKeysCallbackHandlerService.callbackHistoryAndResetJwtKeys(callbackContext)), switchMap((callbackContext) => this.stateValidationCallbackHandlerService.callbackStateValidation(callbackContext)), switchMap((callbackContext) => this.userHandlerService.callbackUser(callbackContext)));
    }
    processImplicitFlowCallback(hash) {
        return this.implicitFlowCallbackHandlerService.implicitFlowCallback(hash).pipe(switchMap((callbackContext) => this.historyJwtKeysCallbackHandlerService.callbackHistoryAndResetJwtKeys(callbackContext)), switchMap((callbackContext) => this.stateValidationCallbackHandlerService.callbackStateValidation(callbackContext)), switchMap((callbackContext) => this.userHandlerService.callbackUser(callbackContext)));
    }
    processRefreshToken(customParamsRefresh) {
        return this.refreshSessionCallbackHandlerService.refreshSessionWithRefreshTokens().pipe(switchMap((callbackContext) => this.refreshTokenCallbackHandlerService.refreshTokensRequestTokens(callbackContext, customParamsRefresh)), switchMap((callbackContext) => this.historyJwtKeysCallbackHandlerService.callbackHistoryAndResetJwtKeys(callbackContext)), switchMap((callbackContext) => this.stateValidationCallbackHandlerService.callbackStateValidation(callbackContext)), switchMap((callbackContext) => this.userHandlerService.callbackUser(callbackContext)));
    }
}
FlowsService.ɵfac = function FlowsService_Factory(t) { return new (t || FlowsService)(i0.ɵɵinject(i1.CodeFlowCallbackHandlerService), i0.ɵɵinject(i2.ImplicitFlowCallbackHandlerService), i0.ɵɵinject(i3.HistoryJwtKeysCallbackHandlerService), i0.ɵɵinject(i4.UserCallbackHandlerService), i0.ɵɵinject(i5.StateValidationCallbackHandlerService), i0.ɵɵinject(i6.RefreshSessionCallbackHandlerService), i0.ɵɵinject(i7.RefreshTokenCallbackHandlerService)); };
FlowsService.ɵprov = i0.ɵɵdefineInjectable({ token: FlowsService, factory: FlowsService.ɵfac });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(FlowsService, [{
        type: Injectable
    }], function () { return [{ type: i1.CodeFlowCallbackHandlerService }, { type: i2.ImplicitFlowCallbackHandlerService }, { type: i3.HistoryJwtKeysCallbackHandlerService }, { type: i4.UserCallbackHandlerService }, { type: i5.StateValidationCallbackHandlerService }, { type: i6.RefreshSessionCallbackHandlerService }, { type: i7.RefreshTokenCallbackHandlerService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,